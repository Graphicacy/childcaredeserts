import _ from 'lodash';
import { createSelector } from 'reselect';
import * as UiLoadingStatuses from '../constants/loadingStatus';
import { default as turfPoint } from 'turf-point';
import { default as turfSample } from 'turf-sample';
// It's important in selectors not to constantly return
// NEW objects. I'm aliasing this object and returing the
// same one each time to reduce the likelihood of an
// infinite loop for any selector generated by
// `createSelector`.
const emptyGeoJson = {
    "type": "FeatureCollection",
    "features": []
};

export const getStatesIsLoading = state => state.sidebar.stateList.status === UiLoadingStatuses.LOADING;
export const getStatesIsSuccess = state => state.sidebar.stateList.status === UiLoadingStatuses.SUCCESS;
export const getStatesIsFailure = state => state.sidebar.stateList.states.status === UiLoadingStatuses.FAILURE;
export const getSelectedStateId = state => state.sidebar.stateList.states.selectedStateId;
export const getStateDictionary = state => state.sidebar.stateList.dictionary;
// This function is not considered safe to use by React UI code directly.
// Please use `getStatesGeoJson` instead.
export const getGeoJson = state => state.sidebar.stateList.states.geoJson;

export const getChildCareCenters = state => state.sidebar.stateList.childCareCenters;
export const getChildCareCentersGeoJson = state => state.sidebar.stateList.childCareCentersGeoJson;

export const getIsDataReady = createSelector(
  [getStatesIsSuccess], (isSuccess) => {
    return isSuccess;
  }
);

export const getStatesGeoJson = createSelector([getIsDataReady, getGeoJson], (isDataReady, geoJson) => {
  if (isDataReady === false) {
    return null;
  }
  return !geoJson ? emptyGeoJson : geoJson;
});

// this is static, by the way.
let downsampledChildCentersGeoJson = null;

export const getDataIsLoading = createSelector(
  [getStatesIsLoading], (isLoading) => {
    return isLoading;
  }
);

const emptyArray = [];
export const getStatesList = createSelector([getStateDictionary], (dictionary) => {
  if (dictionary == null) {
    return emptyArray;
  }

  let properties = _.values(dictionary);
  return properties;
});

export const getSelectedState = createSelector([getStateDictionary, getSelectedStateId], (dictionary, selectedStateId) => {
  if (selectedStateId == null || dictionary == null) {
    return null;
  }
  return dictionary[selectedStateId];
});

export const getSelectedStateProperties = createSelector([getSelectedState], (selectedState) => {
  if (selectedState == null) {
    return null;
  }
  return selectedState.stateProperties;
});

//this will return an array of geoJsons - one for each state in the array of childcare centers.
export const getChildCareCentersGeoJsonDictionary = createSelector([getIsDataReady, getChildCareCentersGeoJson, getSelectedState], 
    (isDataReady, childCareCentersGeoJson, selectedState) => {
  if (isDataReady === false) {
    return null;
  }

  // DOWNSAMPLING BY 1/3rd
  if (downsampledChildCentersGeoJson == null) {
    downsampledChildCentersGeoJson = turfSample(childCareCentersGeoJson, Math.floor(childCareCentersGeoJson.features.length / 3));
  }

  if (selectedState == null) {
    return downsampledChildCentersGeoJson;
  }

  return selectedState.childCareCentersGeoJson;
});