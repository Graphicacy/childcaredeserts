import _ from 'lodash';
import { createSelector } from 'reselect';
import * as UiLoadingStatuses from '../constants/loadingStatus';
// It's important in selectors not to constantly return
// NEW objects. I'm aliasing this object and returing the
// same one each time to reduce the likelihood of an
// infinite loop for any selector generated by
// `createSelector`.
const emptyGeoJson = {
    "type": "FeatureCollection",
    "features": []
};

export const getStatesIsLoading = state => state.sidebar.stateList.status === UiLoadingStatuses.LOADING;
export const getStatesIsSuccess = state => state.sidebar.stateList.status === UiLoadingStatuses.SUCCESS;
export const getStatesIsFailure = state => state.sidebar.stateList.states.status === UiLoadingStatuses.FAILURE;

// This function is not considered safe to use by React UI code directly.
// Please use `getStatesGeoJson` instead.
export const getGeoJson = state => state.sidebar.stateList.states.geoJson;

export const selectedStateId = state => state.sidebar.stateList.states.selectedStateId;

export const getIsDataReady = createSelector(
  [getStatesIsSuccess], (isSuccess) => {
    return isSuccess;
  }
);

export const getStatesGeoJson = createSelector([getIsDataReady, getGeoJson], (isDataReady, geoJson) => {
  if (getIsDataReady === false) {
    return null;
  }

  return !geoJson ? emptyGeoJson : geoJson;
});

export const getDataIsLoading = createSelector(
  [getStatesIsLoading], (isLoading) => {
    return isLoading;
  }
);

const emptyArray = [];
export const getStatesList = createSelector([getStatesGeoJson], (geoJson) => {
  if (geoJson == null) {
    return emptyArray;
  }

  if (_.isEmpty(geoJson.features)) {
    return emptyArray;
  }

  let properties = _.map(geoJson.features, 'properties');
  return properties;
});

export const getSelectedState = createSelector([getStatesList, selectedStateId], (stateList, selectedStateId) => {
  if (selectedStateId == null) {
    return null;
  }

  return _.find(stateList, state => state.STATE === selectedStateId);
});