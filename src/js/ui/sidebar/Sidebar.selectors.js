import _ from 'lodash';
import { createSelector } from 'reselect';
import * as UiLoadingStatuses from '../constants/loadingStatus';
import turfSample from 'turf-sample';
// It's important in selectors not to constantly return
// NEW objects. I'm aliasing this object and returing the
// same one each time to reduce the likelihood of an
// infinite loop for any selector generated by
// `createSelector`.
const emptyGeoJson = {
  'type': 'FeatureCollection',
  'features': []
};

export const getStatesIsLoading = state => state.sidebar.stateList.status === UiLoadingStatuses.LOADING;
export const getStatesIsSuccess = state => state.sidebar.stateList.status === UiLoadingStatuses.SUCCESS;
export const getStatesIsFailure = state => state.sidebar.stateList.states.status === UiLoadingStatuses.FAILURE;
export const getSelectedStateId = state => state.sidebar.stateList.states.selectedStateId;
export const getStateDictionary = state => state.sidebar.stateList.dictionary;
export const getOverlayMode = state => state.sidebar.stateList.overlayMode;
export const getUrbanicity = state => state.sidebar.stateList.urbanicity;
export const getZip = state => state.sidebar.stateList.selectedZip;
export const getStateZipGeoJsonDict = state => state.sidebar.stateList.stateZipGeoJsonDict;
export const getZipDemogDict = state => state.sidebar.stateList.zipDemogDict;
export const getZipOptions = state => state.sidebar.stateList.zipOptions;

// This function is not considered safe to use by React UI code directly.
// Please use `getStatesGeoJson` instead.
export const getGeoJson = state => state.sidebar.stateList.states.geoJson;

export const getChildCareCenters = state => state.sidebar.stateList.childCareCenters;
export const getChildCareCentersGeoJson = state => state.sidebar.stateList.childCareCentersGeoJson;

export const getIsDataReady = createSelector(
  [getStatesIsSuccess], (isSuccess) => {
    return isSuccess;
  }
);

export const getStateDemographics = state => {
  const selectedState = getSelectedStateProperties(state);

  let stateDemographics = _.get(state, `sidebar.stateList.stateDemographics.ALL`, {});
  if (selectedState) {
    const stateId = selectedState.STATE;
    stateDemographics = _.get(state, `sidebar.stateList.stateDemographics.${stateId}`, {});
  }

  return stateDemographics;
};

export const getStatesGeoJson = createSelector([getIsDataReady, getGeoJson], (isDataReady, geoJson) => {
  if (isDataReady === false) {
    return null;
  }
  return !geoJson ? emptyGeoJson : geoJson;
});

export const getDataIsLoading = createSelector(
  [getStatesIsLoading], (isLoading) => {
    return isLoading;
  }
);

const emptyArray = [];
export const getStatesList = createSelector([getStatesGeoJson], (stateGeoJson) => {
  if (!stateGeoJson) {
    return emptyArray;
  }

  const properties = _.map(stateGeoJson.features, feat => {
    const state = _.get(feat, 'properties');
    const id = parseInt(state.STATE);
    const hash = {id};
    hash.stateProperties = state;
    hash.zipsGeoJson = null;
    return hash;
  });

  return properties;
});


export const getZipCodeOptions = state => {
  const selectedState = getSelectedStateProperties(state);
  const centers = getChildCareCenters(state);
  console.log(centers);
  if (selectedState) {

  } else {

  }
};

export const getSelectedState = createSelector(
  [getStateDictionary, getSelectedStateId],
  (dictionary, selectedStateId) => {
    if (!selectedStateId || !dictionary) {
      return null;
    }
    return dictionary[selectedStateId];
  });

export const getSelectedStateProperties = createSelector([getSelectedState], (selectedState) => {
  if (!selectedState) {
    return null;
  }
  return selectedState.stateProperties;
});

// this is static, by the way.
let downsampledChildCentersGeoJson = null;
//this will return an array of geoJsons - one for each state in the array of childcare centers.
export const getChildCareCentersGeoJsonDictionary = createSelector(
[getIsDataReady, getChildCareCentersGeoJson, getSelectedState],
(isDataReady, childCareCentersGeoJson, selectedState) => {
  if (isDataReady === false) {
    return null;
  }

  // DOWNSAMPLING BY 1/3rd
  if (!downsampledChildCentersGeoJson) {
    downsampledChildCentersGeoJson = turfSample(
      childCareCentersGeoJson,
      Math.floor(childCareCentersGeoJson.features.length / 3)
    );
  }

  if (!selectedState) {
    return downsampledChildCentersGeoJson;
  }

  return selectedState.childCareCentersGeoJson;
});
